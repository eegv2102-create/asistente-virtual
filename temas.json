{
  "poo": "La Programación Orientada a Objetos organiza el código en clases y objetos.",
  "clases y objetos": "Una clase es una plantilla para objetos. Un objeto es una instancia de una clase con estado y comportamiento.",
  "objeto": "Un objeto es una instancia de una clase que encapsula datos y métodos.",
  "encapsulamiento": "Oculta detalles internos usando getters y setters para controlar el acceso.",
  "herencia": "Permite que una clase hija herede atributos y métodos de una clase padre, promoviendo reutilización.",
  "polimorfismo": "Permite que un método actúe diferente según el objeto, mediante sobrecarga o sobreescritura.",
  "uml": "UML es un lenguaje visual para modelar sistemas, incluyendo diagramas de clases y secuencias.",
  "mvc": "MVC separa Modelo (datos), Vista (UI) y Controlador (lógica) para mantener el código ordenado.",
  "archivos": "Permite leer y escribir datos en archivos usando POO, como con clases FileHandler.",
  "bases de datos": "Permiten almacenar y consultar información de forma organizada, usando ORM como SQLAlchemy.",
  "pruebas": "Sirven para verificar que el software funciona correctamente, con unit tests en Pytest.",
  "programación avanzada": "Estudia conceptos complejos como POO, patrones de diseño, MVC y más.",
  "singleton": "El patrón Singleton asegura que una clase tenga una única instancia y proporciona un punto de acceso global a ella.",
  "factory": "El patrón Factory permite crear objetos sin especificar la clase exacta del objeto que se va a crear.",
  "observer": "El patrón Observer define una relación de dependencia uno a muchos entre objetos, de manera que cuando uno cambie, los demás se notifiquen.",
  "excepciones": "Las excepciones permiten manejar errores de forma controlada usando bloques try-except.",
  "recursividad": "La recursividad es una técnica donde una función se llama a sí misma para resolver un problema.",
  "listas": "Las listas son estructuras de datos que almacenan múltiples elementos ordenados.",
  "diccionarios": "Los diccionarios permiten almacenar pares clave-valor y acceder a los valores por su clave.",
  "modularidad": "La modularidad permite dividir un programa en partes más pequeñas y reutilizables llamadas módulos.",
  "decoradores": "Los decoradores en Python son funciones que modifican el comportamiento de otras funciones.",
  "refactorización": "La refactorización mejora la estructura interna del código sin cambiar su comportamiento externo.",
  "programación funcional": "La programación funcional se basa en el uso de funciones puras, sin efectos secundarios ni estado mutable.",
  "patrones de diseño": "Los patrones de diseño son soluciones reutilizables a problemas comunes en el diseño de software. Incluye creacionales, estructurales y comportamentales.",
  "api rest": "Una API REST es un estilo de arquitectura web que usa HTTP para acceder a recursos mediante endpoints.",
  "seguridad informática": "Incluye técnicas para proteger sistemas y datos contra accesos no autorizados.",
  "multihilo": "El multihilo permite ejecutar múltiples hilos concurrentemente para mejorar el rendimiento.",
  "protocolos de red": "Protocolos como TCP/IP y HTTP son la base de la comunicación en redes.",
  "versionamiento": "El versionamiento, como con Git, controla cambios en el código a lo largo del tiempo.",
  "testing unitario": "Las pruebas unitarias verifican el funcionamiento de unidades individuales de código, como funciones.",
  "programación asíncrona": "La programación asíncrona, como con asyncio en Python, maneja tareas sin bloquear el hilo principal.",
  "optimización de código": "Técnicas para reducir el tiempo de ejecución y el uso de recursos del código.",
  "microservicios": "Arquitectura que divide una aplicación en servicios independientes que se comunican entre sí.",
  "strategy": "El patrón Strategy define un conjunto de algoritmos que pueden intercambiarse dentro de una clase.",
  "docker": "Docker permite empaquetar aplicaciones en contenedores ligeros."
}